version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: career_postgres
    environment:
      POSTGRES_DB: career_development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Cache & Message Queue
  redis:
    image: redis:7-alpine
    container_name: career_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Gateway
  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: career_gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/career_development
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - OIDC_ISSUER_URL=${OIDC_ISSUER_URL}
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID}
      - OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Web Application
  web-app:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: career_web
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_OIDC_AUTHORITY=${OIDC_ISSUER_URL}
      - REACT_APP_OIDC_CLIENT_ID=${OIDC_CLIENT_ID}
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # STT Service
  stt-service:
    build:
      context: ./services/stt-service
      dockerfile: Dockerfile
    container_name: career_stt
    ports:
      - "8001:8000"
    environment:
      - MODEL_PATH=/models/parakeet-tdt-0.6b-v3
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - ${STT_MODEL_PATH}:/models
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # TTS Service
  tts-service:
    build:
      context: ./services/tts-service
      dockerfile: Dockerfile
    container_name: career_tts
    ports:
      - "8002:8000"
    environment:
      - PIPER_URL=${PIPER_URL:-http://localhost:59125}
      - REDIS_URL=redis://redis:6379
      - DEFAULT_VOICE=${TTS_DEFAULT_VOICE:-en_US-lessac-medium}
      - SAMPLE_RATE=${TTS_SAMPLE_RATE:-22050}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # LLM Adapter
  llm-adapter:
    build:
      context: ./services/llm-adapter
      dockerfile: Dockerfile
    container_name: career_llm
    ports:
      - "8003:8000"
    environment:
      - SCIBOX_BASE_URL=${SCIBOX_BASE_URL}
      - SCIBOX_API_KEY=${SCIBOX_API_KEY}
      - REDIS_URL=redis://redis:6379
      - REQUEST_TIMEOUT=30
      - MAX_RETRIES=3
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Analytics Service
  analytics:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    container_name: career_analytics
    ports:
      - "8004:8000"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/career_development
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Gamification Service
  gamification:
    build:
      context: ./services/gamification
      dockerfile: Dockerfile
    container_name: career_gamification
    ports:
      - "8005:8000"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/career_development
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Jobs Matcher Service
  jobs-matcher:
    build:
      context: ./services/jobs-matcher
      dockerfile: Dockerfile
    container_name: career_jobs_matcher
    ports:
      - "8006:8000"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/career_development
      - REDIS_URL=redis://redis:6379
      - LLM_ADAPTER_URL=http://llm-adapter:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      llm-adapter:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: career_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: career_grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana:/etc/grafana/provisioning

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: career_jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: career_network
