import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Paper,
  Typography,
  Card,
  CardContent,
  Button,
  Avatar,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Grid,
  LinearProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Alert,
  IconButton,
  Tooltip,
  Badge,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Fab
} from '@mui/material';
import {
  Psychology as PsychologyIcon,
  TrendingUp as TrendingUpIcon,
  School as SchoolIcon,
  Work as WorkIcon,
  Star as StarIcon,
  Lightbulb as LightbulbIcon,
  Timeline as TimelineIcon,
  Assignment as AssignmentIcon,
  Chat as ChatIcon,
  Send as SendIcon,
  ExpandMore as ExpandMoreIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  Close as CloseIcon,
  Refresh as RefreshIcon,
  BookmarkBorder as BookmarkIcon,
  Bookmark as BookmarkedIcon,
  Mic as MicIcon
} from '@mui/icons-material';
import VoiceAssistant from '../VoiceAssistant';

interface CareerGoal {
  id: string;
  title: string;
  description: string;
  targetRole: string;
  timeframe: string;
  progress: number;
  status: 'active' | 'completed' | 'paused';
  skills: Array<{
    name: string;
    currentLevel: number;
    targetLevel: number;
    priority: 'high' | 'medium' | 'low';
  }>;
}

interface Recommendation {
  id: string;
  type: 'skill_development' | 'role_opportunity' | 'learning_path' | 'networking';
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  actionItems: string[];
  estimatedTime: string;
  impact: string;
  isBookmarked: boolean;
}

interface ChatMessage {
  id: string;
  sender: 'user' | 'copilot';
  message: string;
  timestamp: Date;
  type?: 'text' | 'recommendation' | 'action';
}

const CareerCopilot: React.FC = () => {
  const [activeGoal, setActiveGoal] = useState<CareerGoal | null>(null);
  const [recommendations, setRecommendations] = useState<Recommendation[]>([]);
  const [chatOpen, setChatOpen] = useState(false);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [voiceAssistantOpen, setVoiceAssistantOpen] = useState(false);

  // Mock data
  const careerGoals: CareerGoal[] = [
    {
      id: '1',
      title: '–°—Ç–∞—Ç—å Tech Lead',
      description: '–†–∞–∑–≤–∏—Ç–∏–µ –ª–∏–¥–µ—Ä—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –¥–ª—è —Ä–æ–ª–∏ Tech Lead',
      targetRole: 'Tech Lead',
      timeframe: '12 –º–µ—Å—è—Ü–µ–≤',
      progress: 65,
      status: 'active',
      skills: [
        { name: 'Leadership', currentLevel: 3, targetLevel: 5, priority: 'high' },
        { name: 'System Design', currentLevel: 4, targetLevel: 5, priority: 'high' },
        { name: 'Mentoring', currentLevel: 2, targetLevel: 4, priority: 'medium' },
        { name: 'Project Management', currentLevel: 3, targetLevel: 4, priority: 'medium' }
      ]
    }
  ];

  const mockRecommendations: Recommendation[] = [
    {
      id: '1',
      type: 'skill_development',
      title: '–ò–∑—É—á–∏—Ç—å System Design',
      description: '–£–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –¥–ª—è —Ä–æ–ª–∏ Tech Lead',
      priority: 'high',
      actionItems: [
        '–ü—Ä–æ–π—Ç–∏ –∫—É—Ä—Å "Designing Data-Intensive Applications"',
        '–ò–∑—É—á–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤',
        '–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã'
      ],
      estimatedTime: '2-3 –º–µ—Å—è—Ü–∞',
      impact: '–ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–æ–ª–∏ Tech Lead',
      isBookmarked: false
    },
    {
      id: '2',
      type: 'role_opportunity',
      title: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–∫–∞–Ω—Å–∏—è: Senior Developer',
      description: '–û—Ç–∫—Ä—ã–ª–∞—Å—å –ø–æ–∑–∏—Ü–∏—è Senior Developer –≤ –∫–æ–º–∞–Ω–¥–µ Platform - –æ—Ç–ª–∏—á–Ω–∞—è —Å—Ç—É–ø–µ–Ω—å–∫–∞ –∫ Tech Lead',
      priority: 'high',
      actionItems: [
        '–û–±–Ω–æ–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—å',
        '–°–≤—è–∑–∞—Ç—å—Å—è —Å hiring manager',
        '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é'
      ],
      estimatedTime: '1-2 –Ω–µ–¥–µ–ª–∏',
      impact: '–ü—Ä—è–º–æ–π –ø—É—Ç—å –∫ —Ü–µ–ª–∏',
      isBookmarked: true
    },
    {
      id: '3',
      type: 'learning_path',
      title: '–†–∞–∑–≤–∏—Ç–∏–µ –ª–∏–¥–µ—Ä—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤',
      description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è soft skills –¥–ª—è –±—É–¥—É—â–∏—Ö –ª–∏–¥–µ—Ä–æ–≤',
      priority: 'medium',
      actionItems: [
        '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å "Effective Leadership"',
        '–ù–∞–π—Ç–∏ –º–µ–Ω—Ç–æ—Ä–∞ —Å—Ä–µ–¥–∏ —Ç–µ–∫—É—â–∏—Ö Tech Lead',
        '–ù–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤ pet-–ø—Ä–æ–µ–∫—Ç–µ'
      ],
      estimatedTime: '6 –º–µ—Å—è—Ü–µ–≤',
      impact: '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
      isBookmarked: false
    },
    {
      id: '4',
      type: 'networking',
      title: '–£—á–∞—Å—Ç–∏–µ –≤ Tech Meetup',
      description: '–í—ã—Å—Ç—É–ø–∏—Ç—å —Å –¥–æ–∫–ª–∞–¥–æ–º –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º Tech Meetup –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏',
      priority: 'medium',
      actionItems: [
        '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–æ–∫–ª–∞–¥–∞',
        '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
        '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–ø–∏–∫–µ—Ä'
      ],
      estimatedTime: '1 –º–µ—Å—è—Ü',
      impact: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç–∏',
      isBookmarked: false
    }
  ];

  useEffect(() => {
    setActiveGoal(careerGoals[0]);
    setRecommendations(mockRecommendations);
    
    // Initial chat messages
    setChatMessages([
      {
        id: '1',
        sender: 'copilot',
        message: '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Career Copilot. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∫–∞—Ä—å–µ—Ä—ã. –í–∏–∂—É, —á—Ç–æ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞–¥ —Ü–µ–ª—å—é —Å—Ç–∞—Ç—å Tech Lead. –ö–∞–∫ –¥–µ–ª–∞ —Å –∏–∑—É—á–µ–Ω–∏–µ–º System Design?',
        timestamp: new Date(),
        type: 'text'
      }
    ]);
  }, []);

  const handleSendMessage = async () => {
    if (!newMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      sender: 'user',
      message: newMessage,
      timestamp: new Date(),
      type: 'text'
    };

    setChatMessages(prev => [...prev, userMessage]);
    setNewMessage('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const responses = [
        '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤ System Design —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤. –•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è?',
        '–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ–∏ —Å–æ–º–Ω–µ–Ω–∏—è. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —Ç–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –Ω–∞–π–¥–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è. –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
        '–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–æ—Ä–∏—é –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ. –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.',
        '–•–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—à—å. –¢–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–µ–Ω –¥–ª—è Tech Lead. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ Agile –∏ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø—Ä–∏–Ω—Ç–æ–≤.'
      ];

      const copilotMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        sender: 'copilot',
        message: responses[Math.floor(Math.random() * responses.length)],
        timestamp: new Date(),
        type: 'text'
      };

      setChatMessages(prev => [...prev, copilotMessage]);
      setIsTyping(false);
    }, 2000);
  };

  const toggleBookmark = (recommendationId: string) => {
    setRecommendations(prev =>
      prev.map(rec =>
        rec.id === recommendationId
          ? { ...rec, isBookmarked: !rec.isBookmarked }
          : rec
      )
    );
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'error';
      case 'medium': return 'warning';
      case 'low': return 'success';
      default: return 'default';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'skill_development': return <SchoolIcon />;
      case 'role_opportunity': return <WorkIcon />;
      case 'learning_path': return <TimelineIcon />;
      case 'networking': return <PeopleIcon />;
      default: return <InfoIcon />;
    }
  };

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'skill_development': return '–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤';
      case 'role_opportunity': return '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ–ª–∏';
      case 'learning_path': return '–ü—É—Ç—å –æ–±—É—á–µ–Ω–∏—è';
      case 'networking': return '–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥';
      default: return type;
    }
  };

  return (
    <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
      {/* Header */}
      <Box mb={4}>
        <Box display="flex" alignItems="center" justifyContent="space-between" mb={2}>
          <Box display="flex" alignItems="center">
            <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>
              <PsychologyIcon />
            </Avatar>
            <Box>
              <Typography variant="h4" component="h1">
                ü§ñ Personal Career Copilot
              </Typography>
              <Typography variant="subtitle1" color="textSecondary">
                –¢–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏
              </Typography>
            </Box>
          </Box>
          <Button
            variant="contained"
            color="primary"
            startIcon={<MicIcon />}
            onClick={() => setVoiceAssistantOpen(true)}
            sx={{ 
              borderRadius: 3,
              px: 3,
              py: 1.5,
              fontSize: '1rem',
              fontWeight: 600,
              boxShadow: 3,
              '&:hover': {
                boxShadow: 6,
                transform: 'translateY(-2px)'
              },
              transition: 'all 0.3s ease'
            }}
          >
            –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫
          </Button>
        </Box>
      </Box>

      <Grid container spacing={3}>
        {/* Current Goal */}
        <Grid item xs={12} md={8}>
          {activeGoal && (
            <Paper sx={{ p: 3, mb: 3 }}>
              <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={3}>
                <Box>
                  <Typography variant="h5" gutterBottom>
                    –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: {activeGoal.title}
                  </Typography>
                  <Typography variant="body1" color="textSecondary" mb={2}>
                    {activeGoal.description}
                  </Typography>
                  <Box display="flex" gap={2} alignItems="center">
                    <Chip 
                      label={`–¶–µ–ª—å: ${activeGoal.targetRole}`}
                      color="primary"
                    />
                    <Chip 
                      label={`–°—Ä–æ–∫: ${activeGoal.timeframe}`}
                      variant="outlined"
                    />
                  </Box>
                </Box>
                
                <Box textAlign="center" minWidth={120}>
                  <Typography variant="h3" color="primary">
                    {activeGoal.progress}%
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    –ø—Ä–æ–≥—Ä–µ—Å—Å
                  </Typography>
                </Box>
              </Box>

              <Box mb={3}>
                <Typography variant="body2" color="textSecondary" mb={1}>
                  –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                </Typography>
                <LinearProgress 
                  variant="determinate" 
                  value={activeGoal.progress} 
                  sx={{ height: 8, borderRadius: 4 }}
                />
              </Box>

              <Typography variant="h6" gutterBottom>
                –†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤:
              </Typography>
              
              <Grid container spacing={2}>
                {activeGoal.skills.map((skill) => (
                  <Grid item xs={12} md={6} key={skill.name}>
                    <Card variant="outlined">
                      <CardContent sx={{ py: 2 }}>
                        <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                          <Typography variant="subtitle2">
                            {skill.name}
                          </Typography>
                          <Chip 
                            label={skill.priority}
                            size="small"
                            color={getPriorityColor(skill.priority) as any}
                          />
                        </Box>
                        
                        <Box display="flex" alignItems="center" gap={2}>
                          <Typography variant="body2" color="textSecondary">
                            {skill.currentLevel}/{skill.targetLevel}
                          </Typography>
                          <LinearProgress 
                            variant="determinate" 
                            value={(skill.currentLevel / skill.targetLevel) * 100}
                            sx={{ flexGrow: 1 }}
                          />
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </Paper>
          )}

          {/* Recommendations */}
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </Typography>
            
            {recommendations.map((rec) => (
              <Accordion key={rec.id} sx={{ mb: 1 }}>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Box display="flex" alignItems="center" width="100%">
                    <Avatar sx={{ mr: 2, bgcolor: 'primary.light' }}>
                      {getTypeIcon(rec.type)}
                    </Avatar>
                    
                    <Box flexGrow={1}>
                      <Typography variant="subtitle1">
                        {rec.title}
                      </Typography>
                      <Box display="flex" gap={1} mt={0.5}>
                        <Chip 
                          label={getTypeLabel(rec.type)}
                          size="small"
                          variant="outlined"
                        />
                        <Chip 
                          label={rec.priority}
                          size="small"
                          color={getPriorityColor(rec.priority) as any}
                        />
                      </Box>
                    </Box>
                    
                    <IconButton 
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleBookmark(rec.id);
                      }}
                      color={rec.isBookmarked ? 'primary' : 'default'}
                    >
                      {rec.isBookmarked ? <BookmarkedIcon /> : <BookmarkIcon />}
                    </IconButton>
                  </Box>
                </AccordionSummary>
                
                <AccordionDetails>
                  <Typography variant="body2" color="textSecondary" mb={2}>
                    {rec.description}
                  </Typography>
                  
                  <Grid container spacing={2} mb={2}>
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
                      </Typography>
                      <Typography variant="body2">
                        {rec.estimatedTime}
                      </Typography>
                    </Grid>
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–ª—å:
                      </Typography>
                      <Typography variant="body2">
                        {rec.impact}
                      </Typography>
                    </Grid>
                  </Grid>
                  
                  <Typography variant="subtitle2" gutterBottom>
                    –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:
                  </Typography>
                  
                  <Stepper orientation="vertical">
                    {rec.actionItems.map((item, index) => (
                      <Step key={index} active>
                        <StepLabel>
                          <Typography variant="body2">
                            {item}
                          </Typography>
                        </StepLabel>
                      </Step>
                    ))}
                  </Stepper>
                  
                  <Box mt={2} display="flex" gap={2}>
                    <Button variant="contained" size="small">
                      –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    </Button>
                    <Button variant="outlined" size="small">
                      –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </Button>
                  </Box>
                </AccordionDetails>
              </Accordion>
            ))}
          </Paper>
        </Grid>

        {/* Sidebar */}
        <Grid item xs={12} md={4}>
          {/* Quick Stats */}
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" gutterBottom>
              –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </Typography>
            
            <Box mb={2}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                <Typography variant="body2">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏</Typography>
                <Typography variant="h6" color="primary">1</Typography>
              </Box>
              
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                <Typography variant="body2">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</Typography>
                <Typography variant="h6" color="success.main">12</Typography>
              </Box>
              
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                <Typography variant="body2">–ò–∑—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏</Typography>
                <Typography variant="h6" color="info.main">8</Typography>
              </Box>
              
              <Box display="flex" justifyContent="space-between" alignItems="center">
                <Typography variant="body2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</Typography>
                <Typography variant="h6" color="warning.main">
                  {recommendations.length}
                </Typography>
              </Box>
            </Box>
          </Paper>

          {/* Recent Achievements */}
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" gutterBottom>
              –ù–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            </Typography>
            
            <List dense>
              <ListItem>
                <ListItemIcon>
                  <CheckCircleIcon color="success" />
                </ListItemIcon>
                <ListItemText
                  primary="–ó–∞–≤–µ—Ä—à–µ–Ω –∫—É—Ä—Å React Advanced"
                  secondary="2 –¥–Ω—è –Ω–∞–∑–∞–¥"
                />
              </ListItem>
              
              <ListItem>
                <ListItemIcon>
                  <StarIcon color="warning" />
                </ListItemIcon>
                <ListItemText
                  primary="–ü–æ–ª—É—á–µ–Ω –±–µ–π–¥–∂ 'Code Reviewer'"
                  secondary="1 –Ω–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥"
                />
              </ListItem>
              
              <ListItem>
                <ListItemIcon>
                  <TrendingUpIcon color="primary" />
                </ListItemIcon>
                <ListItemText
                  primary="–ü–æ–≤—ã—à–µ–Ω —É—Ä–æ–≤–µ–Ω—å TypeScript –¥–æ 4/5"
                  secondary="2 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥"
                />
              </ListItem>
            </List>
          </Paper>

          {/* Quick Actions */}
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            </Typography>
            
            <Box display="flex" flexDirection="column" gap={2}>
              <Button 
                variant="outlined" 
                startIcon={<AssignmentIcon />}
                fullWidth
              >
                –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏
              </Button>
              
              <Button 
                variant="outlined" 
                startIcon={<SchoolIcon />}
                fullWidth
              >
                –ù–∞–π—Ç–∏ –∫—É—Ä—Å—ã
              </Button>
              
              <Button 
                variant="outlined" 
                startIcon={<WorkIcon />}
                fullWidth
              >
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏
              </Button>
              
              <Button 
                variant="outlined" 
                startIcon={<TimelineIcon />}
                fullWidth
              >
                –ö–∞—Ä—å–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞
              </Button>
            </Box>
          </Paper>
        </Grid>
      </Grid>

      {/* Floating Chat Button */}
      <Fab
        color="primary"
        sx={{ position: 'fixed', bottom: 16, right: 16 }}
        onClick={() => setChatOpen(true)}
      >
        <Badge badgeContent={1} color="error">
          <ChatIcon />
        </Badge>
      </Fab>

      {/* Chat Dialog */}
      <Dialog 
        open={chatOpen} 
        onClose={() => setChatOpen(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: { height: '70vh', display: 'flex', flexDirection: 'column' }
        }}
      >
        <DialogTitle>
          <Box display="flex" alignItems="center" justifyContent="space-between">
            <Box display="flex" alignItems="center">
              <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>
                <PsychologyIcon />
              </Avatar>
              <Box>
                <Typography variant="h6">Career Copilot</Typography>
                <Typography variant="caption" color="textSecondary">
                  –û–Ω–ª–∞–π–Ω ‚Ä¢ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å
                </Typography>
              </Box>
            </Box>
            <IconButton onClick={() => setChatOpen(false)}>
              <CloseIcon />
            </IconButton>
          </Box>
        </DialogTitle>
        
        <DialogContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>
          <Box sx={{ flexGrow: 1, overflow: 'auto', mb: 2 }}>
            {chatMessages.map((message) => (
              <Box
                key={message.id}
                sx={{
                  display: 'flex',
                  justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start',
                  mb: 2
                }}
              >
                <Paper
                  sx={{
                    p: 2,
                    maxWidth: '80%',
                    bgcolor: message.sender === 'user' ? 'primary.main' : 'grey.100',
                    color: message.sender === 'user' ? 'primary.contrastText' : 'text.primary'
                  }}
                >
                  <Typography variant="body2">
                    {message.message}
                  </Typography>
                  <Typography 
                    variant="caption" 
                    sx={{ 
                      opacity: 0.7,
                      display: 'block',
                      mt: 0.5
                    }}
                  >
                    {message.timestamp.toLocaleTimeString()}
                  </Typography>
                </Paper>
              </Box>
            ))}
            
            {isTyping && (
              <Box sx={{ display: 'flex', justifyContent: 'flex-start', mb: 2 }}>
                <Paper sx={{ p: 2, bgcolor: 'grey.100' }}>
                  <Typography variant="body2" color="textSecondary">
                    Copilot –ø–µ—á–∞—Ç–∞–µ—Ç...
                  </Typography>
                </Paper>
              </Box>
            )}
          </Box>
          
          <Box display="flex" gap={1}>
            <TextField
              fullWidth
              placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ –∫–∞—Ä—å–µ—Ä–µ..."
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              onKeyPress={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  handleSendMessage();
                }
              }}
              multiline
              maxRows={3}
            />
            <IconButton 
              color="primary" 
              onClick={handleSendMessage}
              disabled={!newMessage.trim() || isTyping}
            >
              <SendIcon />
            </IconButton>
          </Box>
        </DialogContent>
      </Dialog>

      {/* Voice Assistant */}
      <VoiceAssistant 
        open={voiceAssistantOpen}
        onClose={() => setVoiceAssistantOpen(false)}
        context="career_copilot"
        systemPrompt="–¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ—É—á –∏ –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—å–µ—Ä—ã, —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤, –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º."
      />
    </Container>
  );
};

export default CareerCopilot;