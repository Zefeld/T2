import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Paper,
  Typography,
  Card,
  CardContent,
  Button,
  Avatar,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Grid,
  LinearProgress,
  IconButton,
  Tooltip,
  Badge,
  Drawer,
  AppBar,
  Toolbar,
  CssBaseline,
  ListItemButton,
  Collapse,
  Alert,
  Fab,
  Menu,
  MenuItem
} from '@mui/material';
import {
  Dashboard as DashboardIcon,
  Person as PersonIcon,
  Psychology as PsychologyIcon,
  Map as MapIcon,
  TrendingUp as TrendingUpIcon,
  School as SchoolIcon,
  Work as WorkIcon,
  Star as StarIcon,
  EmojiEvents as TrophyIcon,
  Assignment as AssignmentIcon,
  CheckCircle as CheckCircleIcon,
  Schedule as ScheduleIcon,
  Notifications as NotificationsIcon,
  Settings as SettingsIcon,
  Menu as MenuIcon,
  ExpandLess,
  ExpandMore,
  Lightbulb as LightbulbIcon,
  Timeline as TimelineIcon,
  Groups as GroupsIcon,
  Chat as ChatIcon,
  Help as HelpIcon,
  Logout as LogoutIcon,
  AccountCircle as AccountCircleIcon,
  Brightness4 as DarkModeIcon,
  Brightness7 as LightModeIcon
} from '@mui/icons-material';
import CareerCopilot from './CareerCopilot';
import ProgressMap from './ProgressMap';
import EmployeeProfile from './EmployeeProfile';

const drawerWidth = 280;

interface QuickStat {
  label: string;
  value: string | number;
  icon: React.ReactNode;
  color: string;
  trend?: number;
}

interface RecentActivity {
  id: string;
  type: 'achievement' | 'skill' | 'goal' | 'project';
  title: string;
  description: string;
  timestamp: Date;
  icon: React.ReactNode;
}

interface Notification {
  id: string;
  title: string;
  message: string;
  type: 'info' | 'success' | 'warning' | 'error';
  timestamp: Date;
  read: boolean;
}

const EmployeeDashboard: React.FC = () => {
  const [currentView, setCurrentView] = useState('dashboard');
  const [mobileOpen, setMobileOpen] = useState(false);
  const [profileMenuAnchor, setProfileMenuAnchor] = useState<null | HTMLElement>(null);
  const [notificationMenuAnchor, setNotificationMenuAnchor] = useState<null | HTMLElement>(null);
  const [darkMode, setDarkMode] = useState(false);
  const [expandedMenu, setExpandedMenu] = useState<string | null>(null);

  // Mock data
  const quickStats: QuickStat[] = [
    {
      label: '–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å',
      value: 12,
      icon: <TrendingUpIcon />,
      color: 'primary',
      trend: 8
    },
    {
      label: '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏',
      value: 3,
      icon: <AssignmentIcon />,
      color: 'info',
      trend: 0
    },
    {
      label: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏',
      value: 8,
      icon: <CheckCircleIcon />,
      color: 'success',
      trend: 2
    },
    {
      label: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
      value: 15,
      icon: <TrophyIcon />,
      color: 'warning',
      trend: 1
    }
  ];

  const recentActivities: RecentActivity[] = [
    {
      id: '1',
      type: 'achievement',
      title: '–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
      description: '–ü–æ–ª—É—á–µ–Ω –±–µ–π–¥–∂ "React Master"',
      timestamp: new Date('2024-01-15T10:30:00'),
      icon: <TrophyIcon color="warning" />
    },
    {
      id: '2',
      type: 'skill',
      title: '–ù–∞–≤—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω',
      description: 'TypeScript –ø–æ–≤—ã—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è 4',
      timestamp: new Date('2024-01-14T15:20:00'),
      icon: <SchoolIcon color="primary" />
    },
    {
      id: '3',
      type: 'goal',
      title: '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏',
      description: '–¶–µ–ª—å "–°—Ç–∞—Ç—å Tech Lead" - 65% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
      timestamp: new Date('2024-01-13T09:15:00'),
      icon: <TimelineIcon color="info" />
    },
    {
      id: '4',
      type: 'project',
      title: '–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
      description: 'E-commerce Platform —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
      timestamp: new Date('2024-01-12T16:45:00'),
      icon: <WorkIcon color="success" />
    }
  ];

  const notifications: Notification[] = [
    {
      id: '1',
      title: '–ù–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
      message: 'Career Copilot –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–∑—É—á–∏—Ç—å System Design',
      type: 'info',
      timestamp: new Date('2024-01-15T11:00:00'),
      read: false
    },
    {
      id: '2',
      title: '–¶–µ–ª—å –±–ª–∏–∑–∫–∞ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é',
      message: '–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ª–∏ "–ò–∑—É—á–∏—Ç—å React Advanced" –æ—Å—Ç–∞–ª–æ—Å—å 10%',
      type: 'success',
      timestamp: new Date('2024-01-15T09:30:00'),
      read: false
    },
    {
      id: '3',
      title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
      message: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
      type: 'warning',
      timestamp: new Date('2024-01-14T14:20:00'),
      read: true
    }
  ];

  const menuItems = [
    {
      id: 'dashboard',
      label: '–ì–ª–∞–≤–Ω–∞—è',
      icon: <DashboardIcon />,
      component: null
    },
    {
      id: 'career',
      label: '–ö–∞—Ä—å–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
      icon: <PsychologyIcon />,
      children: [
        {
          id: 'copilot',
          label: 'Career Copilot',
          icon: <PsychologyIcon />,
          component: CareerCopilot
        },
        {
          id: 'progress-map',
          label: 'Progress Map',
          icon: <MapIcon />,
          component: ProgressMap
        }
      ]
    },
    {
      id: 'profile',
      label: '–ü—Ä–æ—Ñ–∏–ª—å',
      icon: <PersonIcon />,
      component: EmployeeProfile
    },
    {
      id: 'team',
      label: '–ö–æ–º–∞–Ω–¥–∞',
      icon: <GroupsIcon />,
      component: null
    },
    {
      id: 'help',
      label: '–ü–æ–º–æ—â—å',
      icon: <HelpIcon />,
      component: null
    }
  ];

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  const handleMenuClick = (menuId: string) => {
    if (menuId === expandedMenu) {
      setExpandedMenu(null);
    } else {
      const menuItem = menuItems.find(item => item.id === menuId);
      if (menuItem?.children) {
        setExpandedMenu(menuId);
      } else {
        setCurrentView(menuId);
        setExpandedMenu(null);
        setMobileOpen(false);
      }
    }
  };

  const handleSubMenuClick = (menuId: string) => {
    setCurrentView(menuId);
    setMobileOpen(false);
  };

  const unreadNotifications = notifications.filter(n => !n.read).length;

  const drawer = (
    <Box>
      <Toolbar>
        <Box display="flex" alignItems="center" width="100%">
          <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>
            <PersonIcon />
          </Avatar>
          <Box>
            <Typography variant="subtitle1" noWrap>
              –ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤
            </Typography>
            <Typography variant="caption" color="textSecondary" noWrap>
              Senior Frontend Developer
            </Typography>
          </Box>
        </Box>
      </Toolbar>
      
      <Divider />
      
      <List>
        {menuItems.map((item) => (
          <Box key={item.id}>
            <ListItemButton
              onClick={() => handleMenuClick(item.id)}
              selected={currentView === item.id || (item.children && item.children.some(child => child.id === currentView))}
            >
              <ListItemIcon>
                {item.icon}
              </ListItemIcon>
              <ListItemText primary={item.label} />
              {item.children && (
                expandedMenu === item.id ? <ExpandLess /> : <ExpandMore />
              )}
            </ListItemButton>
            
            {item.children && (
              <Collapse in={expandedMenu === item.id} timeout="auto" unmountOnExit>
                <List component="div" disablePadding>
                  {item.children.map((child) => (
                    <ListItemButton
                      key={child.id}
                      sx={{ pl: 4 }}
                      onClick={() => handleSubMenuClick(child.id)}
                      selected={currentView === child.id}
                    >
                      <ListItemIcon>
                        {child.icon}
                      </ListItemIcon>
                      <ListItemText primary={child.label} />
                    </ListItemButton>
                  ))}
                </List>
              </Collapse>
            )}
          </Box>
        ))}
      </List>
      
      <Divider />
      
      <List>
        <ListItemButton>
          <ListItemIcon>
            <SettingsIcon />
          </ListItemIcon>
          <ListItemText primary="–ù–∞—Å—Ç—Ä–æ–π–∫–∏" />
        </ListItemButton>
        
        <ListItemButton>
          <ListItemIcon>
            <LogoutIcon />
          </ListItemIcon>
          <ListItemText primary="–í—ã–π—Ç–∏" />
        </ListItemButton>
      </List>
    </Box>
  );

  const renderDashboard = () => (
    <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
      {/* Welcome Section */}
      <Box mb={4}>
        <Typography variant="h4" gutterBottom>
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–ª–µ–∫—Å–µ–π! üëã
        </Typography>
        <Typography variant="subtitle1" color="textSecondary">
          –í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –≤–∞—à–∏–º –∫–∞—Ä—å–µ—Ä–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º
        </Typography>
      </Box>

      {/* Quick Stats */}
      <Grid container spacing={3} mb={4}>
        {quickStats.map((stat, index) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <Card>
              <CardContent>
                <Box display="flex" alignItems="center" justifyContent="space-between">
                  <Box>
                    <Typography variant="h4" color={`${stat.color}.main`}>
                      {stat.value}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      {stat.label}
                    </Typography>
                    {stat.trend !== undefined && stat.trend > 0 && (
                      <Typography variant="caption" color="success.main">
                        +{stat.trend} –∑–∞ –Ω–µ–¥–µ–ª—é
                      </Typography>
                    )}
                  </Box>
                  <Avatar sx={{ bgcolor: `${stat.color}.light` }}>
                    {stat.icon}
                  </Avatar>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>

      <Grid container spacing={3}>
        {/* Recent Activity */}
        <Grid item xs={12} md={8}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            </Typography>
            
            <List>
              {recentActivities.map((activity, index) => (
                <Box key={activity.id}>
                  <ListItem>
                    <ListItemIcon>
                      {activity.icon}
                    </ListItemIcon>
                    <ListItemText
                      primary={activity.title}
                      secondary={
                        <Box>
                          <Typography variant="body2" color="textSecondary">
                            {activity.description}
                          </Typography>
                          <Typography variant="caption" color="textSecondary">
                            {activity.timestamp.toLocaleString()}
                          </Typography>
                        </Box>
                      }
                    />
                  </ListItem>
                  {index < recentActivities.length - 1 && <Divider />}
                </Box>
              ))}
            </List>
            
            <Box mt={2} textAlign="center">
              <Button variant="outlined">
                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
              </Button>
            </Box>
          </Paper>
        </Grid>

        {/* Quick Actions & Progress */}
        <Grid item xs={12} md={4}>
          {/* Quick Actions */}
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" gutterBottom>
              –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            </Typography>
            
            <Box display="flex" flexDirection="column" gap={2}>
              <Button 
                variant="contained" 
                startIcon={<PsychologyIcon />}
                onClick={() => setCurrentView('copilot')}
                fullWidth
              >
                –û—Ç–∫—Ä—ã—Ç—å Career Copilot
              </Button>
              
              <Button 
                variant="outlined" 
                startIcon={<MapIcon />}
                onClick={() => setCurrentView('progress-map')}
                fullWidth
              >
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å Progress Map
              </Button>
              
              <Button 
                variant="outlined" 
                startIcon={<PersonIcon />}
                onClick={() => setCurrentView('profile')}
                fullWidth
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
              </Button>
              
              <Button 
                variant="outlined" 
                startIcon={<AssignmentIcon />}
                fullWidth
              >
                –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å
              </Button>
            </Box>
          </Paper>

          {/* Current Goal Progress */}
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å
            </Typography>
            
            <Box mb={2}>
              <Typography variant="subtitle1" gutterBottom>
                –°—Ç–∞—Ç—å Tech Lead
              </Typography>
              <Typography variant="body2" color="textSecondary" mb={2}>
                –†–∞–∑–≤–∏—Ç–∏–µ –ª–∏–¥–µ—Ä—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
              </Typography>
              
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                <Typography variant="body2">
                  –ü—Ä–æ–≥—Ä–µ—Å—Å
                </Typography>
                <Typography variant="body2" color="primary">
                  65%
                </Typography>
              </Box>
              
              <LinearProgress 
                variant="determinate" 
                value={65}
                sx={{ mb: 2 }}
              />
              
              <Typography variant="caption" color="textSecondary">
                –¶–µ–ª—å: –°–µ–Ω—Ç—è–±—Ä—å 2024
              </Typography>
            </Box>
            
            <Button 
              variant="outlined" 
              size="small"
              onClick={() => setCurrentView('copilot')}
              fullWidth
            >
              –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </Button>
          </Paper>
        </Grid>
      </Grid>
    </Container>
  );

  const renderCurrentView = () => {
    const currentMenuItem = menuItems
      .flatMap(item => item.children ? item.children : [item])
      .find(item => item.id === currentView);

    if (currentView === 'dashboard') {
      return renderDashboard();
    }

    if (currentMenuItem?.component) {
      const Component = currentMenuItem.component;
      return <Component />;
    }

    return (
      <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
        <Typography variant="h4">
          {currentMenuItem?.label || '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
        </Typography>
        <Typography variant="body1" color="textSecondary" mt={2}>
          –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
        </Typography>
      </Container>
    );
  };

  return (
    <Box sx={{ display: 'flex' }}>
      <CssBaseline />
      
      {/* App Bar */}
      <AppBar
        position="fixed"
        sx={{
          width: { sm: `calc(100% - ${drawerWidth}px)` },
          ml: { sm: `${drawerWidth}px` },
        }}
      >
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={handleDrawerToggle}
            sx={{ mr: 2, display: { sm: 'none' } }}
          >
            <MenuIcon />
          </IconButton>
          
          <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
            Employee Dashboard
          </Typography>
          
          <Box display="flex" alignItems="center" gap={1}>
            <IconButton
              color="inherit"
              onClick={() => setDarkMode(!darkMode)}
            >
              {darkMode ? <LightModeIcon /> : <DarkModeIcon />}
            </IconButton>
            
            <IconButton
              color="inherit"
              onClick={(e) => setNotificationMenuAnchor(e.currentTarget)}
            >
              <Badge badgeContent={unreadNotifications} color="error">
                <NotificationsIcon />
              </Badge>
            </IconButton>
            
            <IconButton
              color="inherit"
              onClick={(e) => setProfileMenuAnchor(e.currentTarget)}
            >
              <AccountCircleIcon />
            </IconButton>
          </Box>
        </Toolbar>
      </AppBar>

      {/* Navigation Drawer */}
      <Box
        component="nav"
        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}
      >
        <Drawer
          variant="temporary"
          open={mobileOpen}
          onClose={handleDrawerToggle}
          ModalProps={{
            keepMounted: true,
          }}
          sx={{
            display: { xs: 'block', sm: 'none' },
            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },
          }}
        >
          {drawer}
        </Drawer>
        
        <Drawer
          variant="permanent"
          sx={{
            display: { xs: 'none', sm: 'block' },
            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },
          }}
          open
        >
          {drawer}
        </Drawer>
      </Box>

      {/* Main Content */}
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          width: { sm: `calc(100% - ${drawerWidth}px)` },
        }}
      >
        <Toolbar />
        {renderCurrentView()}
      </Box>

      {/* Notification Menu */}
      <Menu
        anchorEl={notificationMenuAnchor}
        open={Boolean(notificationMenuAnchor)}
        onClose={() => setNotificationMenuAnchor(null)}
        PaperProps={{
          sx: { width: 320, maxHeight: 400 }
        }}
      >
        <Box sx={{ p: 2 }}>
          <Typography variant="h6" gutterBottom>
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </Typography>
        </Box>
        <Divider />
        
        {notifications.map((notification) => (
          <MenuItem key={notification.id} sx={{ whiteSpace: 'normal', py: 2 }}>
            <Box>
              <Typography variant="subtitle2" gutterBottom>
                {notification.title}
              </Typography>
              <Typography variant="body2" color="textSecondary" gutterBottom>
                {notification.message}
              </Typography>
              <Typography variant="caption" color="textSecondary">
                {notification.timestamp.toLocaleString()}
              </Typography>
            </Box>
          </MenuItem>
        ))}
        
        <Divider />
        <MenuItem onClick={() => setNotificationMenuAnchor(null)}>
          <Typography variant="body2" color="primary">
            –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </Typography>
        </MenuItem>
      </Menu>

      {/* Profile Menu */}
      <Menu
        anchorEl={profileMenuAnchor}
        open={Boolean(profileMenuAnchor)}
        onClose={() => setProfileMenuAnchor(null)}
      >
        <MenuItem onClick={() => {
          setCurrentView('profile');
          setProfileMenuAnchor(null);
        }}>
          <ListItemIcon>
            <PersonIcon />
          </ListItemIcon>
          –ü—Ä–æ—Ñ–∏–ª—å
        </MenuItem>
        
        <MenuItem onClick={() => setProfileMenuAnchor(null)}>
          <ListItemIcon>
            <SettingsIcon />
          </ListItemIcon>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        </MenuItem>
        
        <Divider />
        
        <MenuItem onClick={() => setProfileMenuAnchor(null)}>
          <ListItemIcon>
            <LogoutIcon />
          </ListItemIcon>
          –í—ã–π—Ç–∏
        </MenuItem>
      </Menu>

      {/* Floating Chat Button */}
      <Fab
        color="primary"
        sx={{ position: 'fixed', bottom: 16, right: 16 }}
        onClick={() => setCurrentView('copilot')}
      >
        <Badge badgeContent={1} color="error">
          <ChatIcon />
        </Badge>
      </Fab>
    </Box>
  );
};

export default EmployeeDashboard;