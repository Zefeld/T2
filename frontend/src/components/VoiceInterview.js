import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './VoiceInterview.css';

const VoiceInterview = () => {
  const navigate = useNavigate();
  const [isRecording, setIsRecording] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [messages, setMessages] = useState([]);
  const [sessionId, setSessionId] = useState(null);
  const [interviewStarted, setInterviewStarted] = useState(false);
  const [interviewCompleted, setInterviewCompleted] = useState(false);
  const [loading, setLoading] = useState(false);
  const [microphonePermission, setMicrophonePermission] = useState(null);
  const [audioLevel, setAudioLevel] = useState(0);

  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);
  const audioContextRef = useRef(null);
  const analyserRef = useRef(null);
  const messagesEndRef = useRef(null);

  // Session validation
  useEffect(() => {
    const storedSessionId = localStorage.getItem('sessionId');
    const sessionData = JSON.parse(localStorage.getItem('sessionData') || '{}');
    
    if (!storedSessionId || !sessionData.resume_analyzed) {
      navigate('/');
      return;
    }
    
    setSessionId(storedSessionId);
  }, [navigate]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    checkMicrophonePermission();
    return () => {
      if (audioContextRef.current) {
        audioContextRef.current.close();
      }
    };
  }, []);

  const checkMicrophonePermission = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      setMicrophonePermission(true);
      stream.getTracks().forEach(track => track.stop());
    } catch (error) {
      setMicrophonePermission(false);
      console.error('Microphone permission denied:', error);
    }
  };

  const setupAudioAnalyser = (stream) => {
    audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
    analyserRef.current = audioContextRef.current.createAnalyser();
    const source = audioContextRef.current.createMediaStreamSource(stream);
    source.connect(analyserRef.current);
    
    analyserRef.current.fftSize = 256;
    const bufferLength = analyserRef.current.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    const updateAudioLevel = () => {
      if (analyserRef.current && isRecording) {
        analyserRef.current.getByteFrequencyData(dataArray);
        const average = dataArray.reduce((a, b) => a + b) / bufferLength;
        setAudioLevel(average / 255);
        requestAnimationFrame(updateAudioLevel);
      }
    };
    updateAudioLevel();
  };

  const startInterview = async () => {
    setLoading(true);
    try {
      const response = await axios.post('/api/voice-interview/start');
      setSessionId(response.data.session_id);
      setMessages([{
        role: 'assistant',
        content: response.data.first_question,
        timestamp: new Date().toISOString(),
        audio_url: response.data.audio_url
      }]);
      setInterviewStarted(true);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
      if (response.data.audio_url) {
        playAudio(response.data.audio_url);
      }
    } catch (error) {
      console.error('Error starting voice interview:', error);
    } finally {
      setLoading(false);
    }
  };

  const playAudio = async (audioUrl) => {
    try {
      setIsPlaying(true);
      const audio = new Audio(audioUrl);
      audio.onended = () => setIsPlaying(false);
      await audio.play();
    } catch (error) {
      console.error('Error playing audio:', error);
      setIsPlaying(false);
    }
  };

  const startRecording = async () => {
    if (!microphonePermission) {
      await checkMicrophonePermission();
      return;
    }

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          sampleRate: 16000
        }
      });

      setupAudioAnalyser(stream);

      mediaRecorderRef.current = new MediaRecorder(stream, {
        mimeType: 'audio/webm;codecs=opus'
      });

      audioChunksRef.current = [];

      mediaRecorderRef.current.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorderRef.current.onstop = async () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
        await sendAudioMessage(audioBlob);
        stream.getTracks().forEach(track => track.stop());
        setAudioLevel(0);
      };

      mediaRecorderRef.current.start();
      setIsRecording(true);
    } catch (error) {
      console.error('Error starting recording:', error);
      setMicrophonePermission(false);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const sendAudioMessage = async (audioBlob) => {
    setLoading(true);

    const userMessage = {
      role: 'user',
      content: '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      timestamp: new Date().toISOString(),
      isAudio: true
    };

    setMessages(prev => [...prev, userMessage]);

    try {
      const formData = new FormData();
      formData.append('audio', audioBlob, 'recording.webm');
      formData.append('session_id', sessionId);

      const response = await axios.post('/api/voice-interview/message', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      const assistantMessage = {
        role: 'assistant',
        content: response.data.response,
        timestamp: new Date().toISOString(),
        audio_url: response.data.audio_url
      };

      setMessages(prev => [...prev, assistantMessage]);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
      if (response.data.audio_url) {
        playAudio(response.data.audio_url);
      }

      if (response.data.interview_completed) {
        setInterviewCompleted(true);
      }
    } catch (error) {
      console.error('Error sending audio message:', error);
      const errorMessage = {
        role: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setLoading(false);
    }
  };

  if (!microphonePermission) {
    return (
      <div className="voice-interview">
        <div className="container">
          <div className="page-header">
            <h2>–ì–æ–ª–æ—Å–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é</h2>
            <p>–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É</p>
          </div>
          
          <div className="permission-request">
            <div className="permission-card">
              <div className="permission-icon">üé§</div>
              <h3>–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É</h3>
              <p>
                –î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. 
                –í–∞—à–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤.
              </p>
              <button onClick={checkMicrophonePermission} className="btn">
                –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
              </button>
              <button onClick={() => navigate('/interview')} className="btn secondary-btn">
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="voice-interview">
      <div className="container">
        <div className="page-header">
          <h2>–ì–æ–ª–æ—Å–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é</h2>
          <p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º</p>
        </div>

        <div className="interview-container">
          {!interviewStarted ? (
            <div className="interview-start">
              <div className="start-card">
                <div className="start-icon">üéôÔ∏è</div>
                <h3>–ì–æ—Ç–æ–≤—ã –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é?</h3>
                <p>
                  –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≥–æ–ª–æ—Å–æ–º, –∞ –≤—ã –æ—Ç–≤–µ—á–∞–π—Ç–µ, –Ω–∞–∂–∏–º–∞—è –∏ —É–¥–µ—Ä–∂–∏–≤–∞—è –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏.
                  –ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏.
                </p>
                <div className="voice-tips">
                  <h4>–°–æ–≤–µ—Ç—ã –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏:</h4>
                  <ul>
                    <li>–ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –Ω–µ —Ç–æ—Ä–æ–ø—è—Å—å</li>
                    <li>–ù–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ç–∏—Ö–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏</li>
                    <li>–î–µ—Ä–∂–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 15-20 —Å–º</li>
                    <li>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º</li>
                  </ul>
                </div>
                <button 
                  onClick={startInterview} 
                  disabled={loading}
                  className="btn start-btn"
                >
                  {loading ? (
                    <>
                      <div className="spinner"></div>
                      –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...
                    </>
                  ) : (
                    '–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é'
                  )}
                </button>
              </div>
            </div>
          ) : (
            <div className="voice-chat-container">
              <div className="chat-messages">
                {messages.map((message, index) => (
                  <div key={index} className={`message ${message.role}`}>
                    <div className="message-avatar">
                      {message.role === 'assistant' ? 'ü§ñ' : 'üë§'}
                    </div>
                    <div className="message-content">
                      <div className="message-text">{message.content}</div>
                      {message.audio_url && (
                        <div className="audio-controls">
                          <button 
                            onClick={() => playAudio(message.audio_url)}
                            className="play-btn"
                            disabled={isPlaying}
                          >
                            {isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'} –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
                          </button>
                        </div>
                      )}
                      {message.isAudio && (
                        <div className="audio-indicator">
                          üéµ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        </div>
                      )}
                      <div className="message-time">
                        {new Date(message.timestamp).toLocaleTimeString()}
                      </div>
                    </div>
                  </div>
                ))}
                {loading && (
                  <div className="message assistant">
                    <div className="message-avatar">ü§ñ</div>
                    <div className="message-content">
                      <div className="processing-indicator">
                        <div className="spinner"></div>
                        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç...
                      </div>
                    </div>
                  </div>
                )}
                <div ref={messagesEndRef} />
              </div>

              {!interviewCompleted ? (
                <div className="voice-controls">
                  <div className="recording-area">
                    <div className={`audio-visualizer ${isRecording ? 'active' : ''}`}>
                      <div 
                        className="audio-level" 
                        style={{ height: `${audioLevel * 100}%` }}
                      ></div>
                    </div>
                    
                    <button
                      className={`record-btn ${isRecording ? 'recording' : ''}`}
                      onMouseDown={startRecording}
                      onMouseUp={stopRecording}
                      onTouchStart={startRecording}
                      onTouchEnd={stopRecording}
                      disabled={loading || isPlaying}
                    >
                      <div className="record-icon">
                        {isRecording ? '‚èπÔ∏è' : 'üé§'}
                      </div>
                      <span className="record-text">
                        {isRecording ? '–û—Ç–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏' : '–ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥–ª—è –∑–∞–ø–∏—Å–∏'}
                      </span>
                    </button>
                  </div>
                  
                  <div className="control-buttons">
                    <button 
                      onClick={() => setInterviewCompleted(true)}
                      className="btn secondary-btn"
                      disabled={loading}
                    >
                      –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
                    </button>
                  </div>
                </div>
              ) : (
                <div className="interview-completed">
                  <div className="completion-message">
                    <h3>–ì–æ–ª–æ—Å–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h3>
                    <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è...</p>
                  </div>
                  <div className="next-steps">
                    <button onClick={() => navigate('/coding-test')} className="btn">
                      –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                    </button>
                    <button onClick={() => navigate('/results')} className="btn secondary-btn">
                      –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default VoiceInterview;