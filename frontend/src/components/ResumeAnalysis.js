import React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Link } from 'react-router-dom';
import axios from 'axios';
import './ResumeAnalysis.css';

const ResumeAnalysis = () => {
  const [file, setFile] = useState(null);
  const [analysis, setAnalysis] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const onDrop = useCallback((acceptedFiles) => {
    const uploadedFile = acceptedFiles[0];
    if (uploadedFile && uploadedFile.type === 'application/pdf') {
      setFile(uploadedFile);
      setError(null);
    } else {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF');
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf']
    },
    multiple: false
  });

  const analyzeResume = async () => {
    if (!file) return;

    setLoading(true);
    setError(null);

    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await axios.post('/api/analyze-resume', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      setAnalysis(response.data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      console.error('Resume analysis error:', err);
    } finally {
      setLoading(false);
    }
  };

  const resetAnalysis = () => {
    setFile(null);
    setAnalysis(null);
    setError(null);
  };

  return (
    <div className="resume-analysis">
      <div className="container">
        <div className="page-header">
          <h2>–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ</h2>
          <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</p>
        </div>

        {!analysis ? (
          <div className="upload-section">
            <div className="upload-card">
              <div
                {...getRootProps()}
                className={`dropzone ${isDragActive ? 'active' : ''} ${file ? 'has-file' : ''}`}
              >
                <input {...getInputProps()} />
                {file ? (
                  <div className="file-info">
                    <div className="file-icon">üìÑ</div>
                    <div className="file-details">
                      <h4>{file.name}</h4>
                      <p>{(file.size / 1024 / 1024).toFixed(2)} MB</p>
                    </div>
                  </div>
                ) : (
                  <div className="upload-prompt">
                    <div className="upload-icon">üìÅ</div>
                    <h3>
                      {isDragActive
                        ? '–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –∑–¥–µ—Å—å'
                        : '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ PDF —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞'}
                    </h3>
                    <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç PDF</p>
                  </div>
                )}
              </div>

              {error && (
                <div className="error-message">
                  <span>‚ö†Ô∏è {error}</span>
                </div>
              )}

              <div className="upload-actions">
                {file && (
                  <>
                    <button
                      onClick={analyzeResume}
                      disabled={loading}
                      className="btn analyze-btn"
                    >
                      {loading ? (
                        <>
                          <div className="spinner"></div>
                          –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...
                        </>
                      ) : (
                        '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ'
                      )}
                    </button>
                    <button onClick={resetAnalysis} className="btn secondary-btn">
                      –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª
                    </button>
                  </>
                )}
              </div>
            </div>
          </div>
        ) : (
          <div className="analysis-results">
            <div className="results-header">
              <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h3>
              <button onClick={resetAnalysis} className="btn secondary-btn">
                –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
              </button>
            </div>

            <div className="results-grid">
              <div className="result-card">
                <h4>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</h4>
                <div className="score-display">
                  <div className="score-circle">
                    <span className="score-value">{analysis.overall_score || 'N/A'}</span>
                    <span className="score-label">–∏–∑ 10</span>
                  </div>
                </div>
              </div>

              <div className="result-card">
                <h4>–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏</h4>
                <div className="skills-list">
                  {analysis.skills && analysis.skills.length > 0 ? (
                    analysis.skills.map((skill, index) => (
                      <span key={index} className="skill-tag">
                        {skill}
                      </span>
                    ))
                  ) : (
                    <p>–ù–∞–≤—ã–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã</p>
                  )}
                </div>
              </div>

              <div className="result-card">
                <h4>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</h4>
                <div className="experience-info">
                  <p><strong>–û–±—â–∏–π —Å—Ç–∞–∂:</strong> {analysis.experience_years || '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç</p>
                  <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Ä–∞–±–æ—Ç—ã:</strong> {analysis.job_count || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                </div>
              </div>

              <div className="result-card full-width">
                <h4>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
                <div className="recommendations">
                  {analysis.recommendations && analysis.recommendations.length > 0 ? (
                    <ul>
                      {analysis.recommendations.map((rec, index) => (
                        <li key={index}>{rec}</li>
                      ))}
                    </ul>
                  ) : (
                    <p>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã</p>
                  )}
                </div>
              </div>
            </div>

            <div className="next-steps">
              <h4>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏</h4>
              <div className="steps-buttons">
                <Link to="/interview" className="btn">
                  –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é
                </Link>
                <Link to="/coding-test" className="btn secondary-btn">
                  –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                </Link>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ResumeAnalysis;